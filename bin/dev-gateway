#!/usr/bin/env node
const { resolve } = require('path');
const { writeFileSync } = require('fs');
const program = require('commander');
const cloneDeep = require('lodash.clonedeep');
const { version } = require('./../package.json');
const { devGateway, extract, deploy } = require('./../');

program
  .version(version)
  .option('-p, --port <port>', 'Port to listen on (3000)', parseInt)
  .option('-h, --host <host>', 'Host to listen on (localhost)')
  .option('-d, --dest <main destination>', 'Domain name for extracted rules')
  .option('-o, --output <output rules file>', 'Output file with extracted rules')
  .option('-a, --all', 'Select all')
  .parse(process.argv);


const file = resolve(process.cwd(), program.args[1] || program.args[0] || 'app.js');
const cmd = program.args.length === 1 ? 'serve' : program.args[0];

const options = cloneDeep(require(file));

const cmdOpts = {
  port: program.port,
  host: program.host,
  dest: program.dest || options.dest,
  output: program.output || 'rules.json',
  all: program.all
};

if (cmd === 'serve') {
  options.port = cmdOpts.port || options.port || 3000;
  options.host = cmdOpts.host || options.host || 'localhost';

  devGateway(options);
} else if (cmd === 'extract') {
  try {
    options.host = options.host || cmdOpts.host;
    const out = extract(options, cmdOpts.dest);
    writeFileSync(resolve(cmdOpts.output), JSON.stringify(out, null, 2));
    console.log(`Rules successfully extracted`);
    process.exit(0);
  } catch (err) {
    console.error('Extraction error:', err);
    process.exit(1);
  }
} else if (cmd === 'deploy') {
  deploy(options, cmdOpts.all)
    .then(results => {
      const resolved = results.filter(result => result.resolved);
      const notResolved = results.filter(result => !result.resolved);

      console.log('\n\n Deployment done.');
      console.log(' ------------------');
      if (resolved.length) {
        resolved.forEach(deploy => {
          console.log(` ${deploy.result.rule.dest} - ${deploy.result.rule.pathname} was saccessfully done!`);
          console.log(` Output: ${deploy.result.stdout}`);
          console.log(' ------------------');
        });
      }

      if (notResolved.length) {
        notResolved.forEach(deploy => {
          console.log(` ${deploy.reason.rule.dest} - ${deploy.reason.rule.pathname} was done with error!`);
          console.log(` Error: ${deploy.reason.err}`);
          console.log(` Stderr: ${deploy.reason.stderr}`);
          console.log(' ------------------');
        });
      }
    })
    .catch(err => {
      console.error(err);
    });
} else {
  console.error('Unknown comand');
  process.exit(1);
}
